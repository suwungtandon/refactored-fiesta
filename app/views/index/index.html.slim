.halign-wrapper.valign-wrapper.red.lighten-2[style="height: 400px"]
  .waiting-for-action-area.halign-wrapper[style="flex-direction: column"]
    .time-area.u-mb_20 Let's Work !
    button.start-button.waves-effect.waves-light.btn-large.red.lighten-3 Start

  .couting-area.center-align[style="display: none; width: 100%"]
    .time-area.u-mb_20.row
      .work-time.col.m3.offset-m3 = '00:00:00'
      .break-time.col.m3 = '(00:00:00)'
    button.pause-button.waves-effect.waves-light.btn-large.u-mr_100.deep-orange.lighten-2[style="width: 200px"] Pause
    button.stop-button.waves-effect.waves-light.btn-large.red.lighten-1[style="width: 200px"] Stop
    
    = form_tag attendance_records_new_path, id: 'attendance-record-form', method: :post, authenticity_token: true do
      = hidden_field_tag 'attendance_record[start_time]', Time.now
      = hidden_field_tag 'attendance_record[break_time]', '0'
      = hidden_field_tag 'attendance_record[end_time]', Time.now
    
.container
  section.section
    h4 Records
    
    table.highlight
      thead
        tr
          th Date
          th Work hours (Break time)
          th Total time
          th Memo
          th Actions
      
      tbody
        - @attendance_records.each do |attendance_record|
          tr
            td[nowrap] = attendance_record.start_time.strftime('%B %d, %Y')
            td[nowrap] = formatted_time_with_break_time(attendance_record)
            td[nowrap] = formatted_duration(attendance_record.end_time - attendance_record.start_time - attendance_record.break_time)
            td = attendance_record.memo
            td[nowrap]
              = link_to 'Edit', edit_attendance_record_path(attendance_record), class: 'waves-effect waves btn-flat'
              = link_to 'Delete', attendance_record_path(attendance_record), method: 'delete', class: 'waves-effect waves-red btn-flat'
    
    - if @target_month.present? && @candidate_months.present?
      ul.pagination
        - prev_month = @target_month - 1.month
        - next_month = @target_month + 1.month
        - has_prev_month = @target_month != @candidate_months.first
        - has_next_month = @target_month != @candidate_months.last
        
        li[class="#{has_prev_month ? '' : 'disabled'}"]
          a[href="#{has_prev_month ? "/?year=#{prev_month.year}&month=#{prev_month.month}" : "/"}"]
            i.material-icons chevron_left
          
        - @candidate_months.each do |month|
          - klass = month ==  @target_month ? 'active' : ''
          li.waves-effect[class="#{klass}"]
            a[href="/?year=#{month.year}&month=#{month.month}"] = month.strftime('%Y/%-m')
            
        li[class="#{has_next_month ? '' : 'disabled'}"]
          a[href="#{has_next_month ? "/?year=#{next_month.year}&month=#{next_month.month}" : "/"}"]
            i.material-icons chevron_right

  section.section
    h4 Report
    - if current_user.try!(:hourly_wage)
      .row
        .input-field.col.m4
          input[type="text" value="#{formatted_duration(total_working_time(@attendance_records))}"]
          label.active Total time
        
        .input-field.col.m4
          input#hourly-wage[type="text" value="#{current_user.hourly_wage}"]
          label.active Hourly wage
          
        .input-field.col.m4
          input#monthly-salary[type="text" value="#{(total_working_time(@attendance_records) / 60 / 60 * current_user.hourly_wage).to_i}"]
          label.active Monthly salary (calculated automatically)
    - else
      p You have to set hourly wage first.
    
    a.btn[href="/attendance_records/download.csv?year=#{@target_month.year}&month=#{@target_month.month}"] Download report as csv
